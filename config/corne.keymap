/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
// #include <keys_uk_enhanced.h>


#define DEFAULT 0
#define NAV 1
#define SYM 2
#define NUM 3
#define RAISE 4
#define COLEMAK_DH 5

/*
 *  &trans &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans &trans
 *  &trans &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans &trans
 *  &trans &trans &trans &trans &trans &trans    &trans &trans &trans &trans &trans &trans
 *                       &trans &trans &trans    &trans &trans &trans
 */


&caps_word {    
    continue-list = <BACKSPACE UNDERSCORE MINUS N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
};

/ {
        behaviors {
            hm: balanced_homerow_mods {
                compatible = "zmk,behavior-hold-tap";
                #binding-cells = <2>;
                tapping-term-ms = <200>;    // <---[[moderate duration]]
                quick-tap-ms = <0>;
                flavor = "balanced";
                bindings = <&kp>, <&kp>;
            };
            tcd: toggle_colemak_dance {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <500>; // adjust if needed
                bindings = <&kp LC(B)>, <&tog COLEMAK_DH>;
            };
        };
        combos {
            compatible = "zmk,combos";

            caps_word {
                timeout-ms = <30>;
                key-positions = <16 19>;
                bindings = <&caps_word>;
                layers = <0>;
            };
            switch_workspace {
                timeout-ms = <30>;
                key-positions = <20 21>;
                bindings = <&kp LA(TAB)>;
                layers = <0>;
            };
            switch_workspace_mirror {
                timeout-ms = <30>;
                key-positions = <14 15>;
                bindings = <&kp LA(TAB)>;
                layers = <0>;
            };
            tab {
                timeout-ms = <30>;
                key-positions = <15 16>;
                bindings = <&kp TAB>;
                layers = <0>;
            };
            enter {
                timeout-ms = <30>;
                key-positions = <19 20>;
                bindings = <&kp RET>;
                // layers = <0>;
            };
            cyrillic_x {
                timeout-ms = <30>;
                key-positions = <8 9>;
                bindings = <&kp LBKT>;
                layers = <0>;
            };

/*
            question_mark {
                timeout-ms = <30>;
                key-positions = <21 22>;
                bindings = <&kp UK_QMARK>;
                layers = <0>;
            };
            ukrainian_i {
                timeout-ms = <30>;
                key-positions = <13 14>;
                bindings = <&kp UK_UKRAINIAN_I>;
                layers = <0>;
            };

 */
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
    &none   &kp Q        &kp W       &kp E       &kp R       &kp T      &kp Y    &kp U       &kp I       &kp O       &kp P         &none
    &none   &hm LGUI A   &hm LALT S  &hm LCTL D  &hm LSFT F  &kp G      &kp H    &hm RSFT J  &hm RCTL K  &hm RALT L  &hm RGUI SQT  &none
    &none   &kp Z        &kp X       &kp C       &kp V       &kp B      &kp N    &kp M       &kp COMMA   &kp DOT     &kp FSLH      &none 
                 &lt NUM ESC &lt NAV SPACE &kp TAB           &lt RAISE RET    &lt SYM BSPC &tcd
                        >;
                };
                nav_layer {
                        bindings = <
   &trans  &kp LA(F4)  &trans  &trans  &trans  &trans            &trans   &kp LPAR &kp RPAR &kp LBRC  &kp RBRC      &trans
   &trans  &kp LC(A)  &trans  &trans  &trans  &trans         &kp LEFT &kp DOWN &kp UP   &kp RIGHT &kp SEMI &trans  
   &trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &trans   &trans   &kp LBKT &kp RBKT &key_repeat &trans   &trans
                                    &trans &trans &trans       &trans &kp DEL &trans 
                        >;
                };

                sym_layer {
                        bindings = <
   &none   &trans    &kp BSLH  &kp STAR   &kp AMPS   &none         &none   &none   &none   &none   &none   &bootloader
   &none   &kp GRAVE &kp CARET &kp PRCNT  &kp DLLR   &kp PIPE         &none   &trans  &trans  &trans  &trans  &none
   &none   &trans    &kp HASH  &kp AT     &kp EXCL   &none         &none   &none   &none   &none   &none   &none
                               &kp UNDER  &kp MINUS  &kp TILDE    &none   &none   &none
                        >;
                };
               // TODO: toggle two modifiers at once to access             
               num_layer {
                        bindings = <
   &trans &trans &trans &trans &trans &trans    &kp FSLH   &kp N7 &kp N8 &kp N9 &trans &trans
   &trans &trans &trans &trans &trans &trans    &kp PLUS   &kp N4 &kp N5 &kp N6 &kp EQUAL &trans
   &trans &trans &trans &trans &trans &trans    &kp STAR   &kp N1 &kp N2 &kp N3 &trans &trans
                        &trans &trans &trans     &kp MINUS &kp N0 &trans
                        >;
                };
                raise_layer {
                        bindings = <
   &ext_power EP_ON   &trans          &out OUT_USB  &out OUT_TOG  &out OUT_BLE &trans        &none   &none   &none   &none   &none   &none
   &ext_power EP_OFF  &bt BT_CLR_ALL  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR   &trans        &none   &none   &none   &none   &none   &none
   &ext_power EP_TOG  &trans          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2 &trans        &none   &none   &none   &none   &none   &none
                                 &bt BT_PRV       &bt BT_NXT       &none           &none        &none   &none
                        >;
                };
                colemak_dh_layer {
                        bindings = <
                    &none  &kp Q   &kp W   &kp F   &kp P   &kp B    &kp J   &kp L   &kp U   &kp Y   &kp SQT &none
                    &none  &kp A   &kp R   &kp S   &kp T   &kp G    &kp M   &kp N   &kp E   &kp I   &kp O   &none
                    &none  &kp Z   &kp X   &kp C   &kp D   &kp V    &kp K   &kp H   &kp COMMA &kp DOT &kp FSLH &none
                                    &lt NUM ESC  &lt NAV SPACE  &lt RAISE RET  &lt SYM BSPC  &tcd
                >;
            };
        };
    };
